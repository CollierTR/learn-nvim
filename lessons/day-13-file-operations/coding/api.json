{
  "openapi": "3.0.3",
  "info": {
    "title": "E-Commerce Platform API",
    "description": "Comprehensive API for managing e-commerce operations including users, products, orders, and payments",
    "version": "2.1.0",
    "contact": {
      "name": "API Support",
      "email": "api-support@ecommerce.com",
      "url": "https://docs.ecommerce.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "termsOfService": "https://ecommerce.com/terms"
  },
  "servers": [
    {
      "url": "https://api.ecommerce.com/v2",
      "description": "Production server"
    },
    {
      "url": "https://staging-api.ecommerce.com/v2",
      "description": "Staging server"
    },
    {
      "url": "http://localhost:8080/api/v2",
      "description": "Development server"
    }
  ],
  "paths": {
    "/users": {
      "get": {
        "summary": "List users",
        "description": "Retrieve a paginated list of users with optional filtering",
        "operationId": "listUsers",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by user status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["active", "inactive", "suspended"]
            }
          },
          {
            "name": "role",
            "in": "query",
            "description": "Filter by user role",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["admin", "customer", "vendor", "support"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "security": [
          {
            "BearerAuth": ["users:read"]
          },
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "post": {
        "summary": "Create user",
        "description": "Create a new user account",
        "operationId": "createUser",
        "tags": ["Users"],
        "requestBody": {
          "description": "User data for creation",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "security": [
          {
            "BearerAuth": ["users:write"]
          }
        ]
      }
    },
    "/users/{userId}": {
      "get": {
        "summary": "Get user by ID",
        "description": "Retrieve detailed information about a specific user",
        "operationId": "getUserById",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Unique identifier for the user",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "security": [
          {
            "BearerAuth": ["users:read"]
          }
        ]
      },
      "put": {
        "summary": "Update user",
        "description": "Update an existing user's information",
        "operationId": "updateUser",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Unique identifier for the user",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Updated user data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "security": [
          {
            "BearerAuth": ["users:write"]
          }
        ]
      },
      "delete": {
        "summary": "Delete user",
        "description": "Delete a user account (soft delete)",
        "operationId": "deleteUser",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Unique identifier for the user",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "security": [
          {
            "BearerAuth": ["users:delete"]
          }
        ]
      }
    },
    "/products": {
      "get": {
        "summary": "List products",
        "description": "Retrieve a paginated list of products with filtering and search capabilities",
        "operationId": "listProducts",
        "tags": ["Products"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Filter by product category",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term for product name or description",
            "schema": {
              "type": "string",
              "minLength": 3
            }
          },
          {
            "name": "minPrice",
            "in": "query",
            "description": "Minimum price filter",
            "schema": {
              "type": "number",
              "minimum": 0
            }
          },
          {
            "name": "maxPrice",
            "in": "query",
            "description": "Maximum price filter",
            "schema": {
              "type": "number",
              "minimum": 0
            }
          },
          {
            "name": "inStock",
            "in": "query",
            "description": "Filter by stock availability",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Products retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Product"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "filters": {
                      "type": "object",
                      "properties": {
                        "categories": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "priceRange": {
                          "type": "object",
                          "properties": {
                            "min": {
                              "type": "number"
                            },
                            "max": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create product",
        "description": "Create a new product",
        "operationId": "createProduct",
        "tags": ["Products"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": ["products:write"]
          }
        ]
      }
    },
    "/orders": {
      "get": {
        "summary": "List orders",
        "description": "Retrieve orders for the authenticated user or all orders for admin users",
        "operationId": "listOrders",
        "tags": ["Orders"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by order status",
            "schema": {
              "type": "string",
              "enum": ["pending", "confirmed", "processing", "shipped", "delivered", "cancelled"]
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Filter orders from this date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Filter orders until this date",
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Orders retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Order"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": ["orders:read"]
          }
        ]
      },
      "post": {
        "summary": "Create order",
        "description": "Create a new order",
        "operationId": "createOrder",
        "tags": ["Orders"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": ["orders:write"]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the user"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "firstName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "User's first name"
          },
          "lastName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "User's last name"
          },
          "role": {
            "type": "string",
            "enum": ["admin", "customer", "vendor", "support"],
            "description": "User's role in the system"
          },
          "status": {
            "type": "string",
            "enum": ["active", "inactive", "suspended"],
            "description": "Current status of the user account"
          },
          "profile": {
            "type": "object",
            "properties": {
              "bio": {
                "type": "string",
                "maxLength": 500
              },
              "avatar": {
                "type": "string",
                "format": "uri"
              },
              "phone": {
                "type": "string",
                "pattern": "^\\+[1-9]\\d{1,14}$"
              },
              "dateOfBirth": {
                "type": "string",
                "format": "date"
              }
            }
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["id", "email", "firstName", "lastName", "role", "status", "createdAt", "updatedAt"]
      },
      "CreateUserRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]"
          },
          "firstName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50
          },
          "lastName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50
          },
          "role": {
            "type": "string",
            "enum": ["customer", "vendor"],
            "default": "customer"
          }
        },
        "required": ["email", "password", "firstName", "lastName"]
      },
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50
          },
          "lastName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50
          },
          "profile": {
            "type": "object",
            "properties": {
              "bio": {
                "type": "string",
                "maxLength": 500
              },
              "phone": {
                "type": "string",
                "pattern": "^\\+[1-9]\\d{1,14}$"
              },
              "dateOfBirth": {
                "type": "string",
                "format": "date"
              }
            }
          }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200
          },
          "description": {
            "type": "string",
            "maxLength": 2000
          },
          "sku": {
            "type": "string",
            "pattern": "^[A-Z0-9]{6,12}$"
          },
          "price": {
            "type": "number",
            "minimum": 0,
            "multipleOf": 0.01
          },
          "category": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "inventory": {
            "type": "object",
            "properties": {
              "quantity": {
                "type": "integer",
                "minimum": 0
              },
              "reserved": {
                "type": "integer",
                "minimum": 0
              },
              "available": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          "images": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "format": "uri"
                },
                "alt": {
                  "type": "string"
                },
                "isPrimary": {
                  "type": "boolean"
                }
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["id", "name", "sku", "price", "category", "createdAt", "updatedAt"]
      },
      "CreateProductRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200
          },
          "description": {
            "type": "string",
            "maxLength": 2000
          },
          "sku": {
            "type": "string",
            "pattern": "^[A-Z0-9]{6,12}$"
          },
          "price": {
            "type": "number",
            "minimum": 0,
            "multipleOf": 0.01
          },
          "category": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "initialQuantity": {
            "type": "integer",
            "minimum": 0
          }
        },
        "required": ["name", "sku", "price", "category", "initialQuantity"]
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "orderNumber": {
            "type": "string",
            "pattern": "^ORD-[0-9]{8}$"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "confirmed", "processing", "shipped", "delivered", "cancelled"]
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          },
          "totals": {
            "type": "object",
            "properties": {
              "subtotal": {
                "type": "number",
                "minimum": 0
              },
              "tax": {
                "type": "number",
                "minimum": 0
              },
              "shipping": {
                "type": "number",
                "minimum": 0
              },
              "discount": {
                "type": "number",
                "minimum": 0
              },
              "total": {
                "type": "number",
                "minimum": 0
              }
            }
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["id", "orderNumber", "userId", "status", "items", "totals", "createdAt", "updatedAt"]
      },
      "CreateOrderRequest": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "productId": {
                  "type": "string",
                  "format": "uuid"
                },
                "quantity": {
                  "type": "integer",
                  "minimum": 1
                }
              },
              "required": ["productId", "quantity"]
            },
            "minItems": 1
          },
          "shippingAddressId": {
            "type": "string",
            "format": "uuid"
          },
          "billingAddressId": {
            "type": "string",
            "format": "uuid"
          },
          "paymentMethodId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": ["items", "shippingAddressId", "billingAddressId", "paymentMethodId"]
      },
      "OrderItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "productId": {
            "type": "string",
            "format": "uuid"
          },
          "productName": {
            "type": "string"
          },
          "productSku": {
            "type": "string"
          },
          "quantity": {
            "type": "integer",
            "minimum": 1
          },
          "unitPrice": {
            "type": "number",
            "minimum": 0
          },
          "totalPrice": {
            "type": "number",
            "minimum": 0
          }
        },
        "required": ["id", "productId", "productName", "productSku", "quantity", "unitPrice", "totalPrice"]
      },
      "Address": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "enum": ["shipping", "billing", "both"]
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "company": {
            "type": "string"
          },
          "street1": {
            "type": "string"
          },
          "street2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "country": {
            "type": "string",
            "pattern": "^[A-Z]{2}$"
          },
          "isDefault": {
            "type": "boolean"
          }
        },
        "required": ["id", "type", "firstName", "lastName", "street1", "city", "state", "postalCode", "country"]
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "minimum": 1
          },
          "limit": {
            "type": "integer",
            "minimum": 1
          },
          "total": {
            "type": "integer",
            "minimum": 0
          },
          "pages": {
            "type": "integer",
            "minimum": 0
          },
          "hasNext": {
            "type": "boolean"
          },
          "hasPrevious": {
            "type": "boolean"
          }
        },
        "required": ["page", "limit", "total", "pages", "hasNext", "hasPrevious"]
      },
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "object"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "path": {
            "type": "string"
          }
        },
        "required": ["code", "message", "timestamp"]
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request - invalid parameters",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized - authentication required",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden - insufficient permissions",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NotFound": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Conflict": {
        "description": "Conflict - resource already exists",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ValidationError": {
        "description": "Validation error - invalid data",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InternalError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT token for authentication"
      },
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key",
        "description": "API key for service-to-service authentication"
      },
      "OAuth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://auth.ecommerce.com/oauth/authorize",
            "tokenUrl": "https://auth.ecommerce.com/oauth/token",
            "scopes": {
              "users:read": "Read user information",
              "users:write": "Create and update users",
              "users:delete": "Delete users",
              "products:read": "Read product information",
              "products:write": "Create and update products",
              "products:delete": "Delete products",
              "orders:read": "Read order information",
              "orders:write": "Create and update orders",
              "orders:delete": "Cancel orders"
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "BearerAuth": []
    },
    {
      "OAuth2": []
    }
  ],
  "tags": [
    {
      "name": "Users",
      "description": "User management operations"
    },
    {
      "name": "Products",
      "description": "Product catalog operations"
    },
    {
      "name": "Orders",
      "description": "Order management operations"
    },
    {
      "name": "Authentication",
      "description": "Authentication and authorization"
    }
  ]
}